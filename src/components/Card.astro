---
interface Props {
  title: string;
  bodyText: string;
  descriptors?: string[];
  linkPath: string;
  classes?: string[];
}

const { title, bodyText, linkPath, descriptors = [], classes = [], ...rest } = Astro.props;
---

<article class:list={['card', ...classes]} {...rest}>
  <div class='image-container'>
    <slot />
  </div>
  <div class='card-container'>
    <h3 class='card-title'>{title}</h3>
    <div class='card-body'>
      <!-- TODO: refactor this into its own component. Used across the site. -->
      <div class='body-image-container'>
        <slot name='body' />
      </div>
      <div class='card-rollover'>
        <Fragment set:html={bodyText} />
      </div>
    </div>
    <div class='card-footer'>
      <a href={linkPath} class='learn-more-link'>Learn more</a>
    </div>
    {
      descriptors.length ? (
        <ul class='descriptors'>
          {descriptors.map((descriptor) => (
            <li>{descriptor}</li>
          ))}
        </ul>
      ) : (
        ''
      )
    }
  </div>
</article>

<style>
  .image-container {
    position: absolute;
    inset: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;

    picture {
      position: absolute;
      width: 100%;
      height: 100%;
      object-fit: cover;

      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
      }
    }
  }

  .card-title {
    width: fit-content;
    padding: 10px;
    font-size: 2.5rem;
    font-style: italic;
    font-weight: 900;
    line-height: 1;
    color: var(--white);
    text-transform: uppercase;
    background: var(--color-heading-background);
  }

  .learn-more-link {
    align-self: flex-end;
    padding: 10px;
    font-size: 1.25rem;
    font-style: italic;
    font-weight: 800;
    color: var(--white);
    text-decoration: none;
    text-transform: uppercase;
    background: var(--color-heading-background);

    &::before {
      position: absolute;
      inset: 0;
      z-index: 2;
      content: '';
    }
  }

  .card-rollover {
    height: 100%;
    padding: 16px;
    margin: 14px 0;
    font-family: 'Source Serif 4', serif;
    font-size: 1.25rem;
    font-weight: 400;
    line-height: 1.3;
    color: var(--white);
    background: var(--color-background);
  }

  .card-rollover,
  .learn-more-link {
    opacity: 0;
    transition: 250ms ease-in-out;
  }

  ul.descriptors {
    position: absolute;
    right: 0;
    bottom: 0;
    left: 0;
    display: flex;
    gap: 10px;
    padding: 0 16px;
    margin: 0;
    font-size: 1.25rem;
    font-weight: 800;
    color: var(--white);
    text-transform: uppercase;
    white-space: nowrap;
    list-style: none;
    background: var(--color-heading-background);
    opacity: 1;
    transition: all 150ms ease-in-out;

    li:not(:first-of-type) {
      list-style-position: inside;
      list-style-type: disc;
    }
  }

  .card-body {
    position: relative;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .card-footer {
    z-index: 2;
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
  }

  .body-image-container {
    position: absolute;
    top: 0;
    z-index: 0;

    picture img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: top;
    }
  }

  .card-container {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%;
    overflow: hidden;
  }

  .card {
    position: relative;
    padding: 20px;
    color: black;
    background: var(--white);

    &:focus-within {
      outline: 2px solid red;

      .card-rollover {
        opacity: 0.95;
      }

      .learn-more-link {
        opacity: 1;
      }

      .descriptors {
        z-index: -1;
        opacity: 0;
      }
    }

    &:hover {
      .descriptors {
        opacity: 0;
      }

      .card-rollover {
        opacity: 0.95;
      }

      .learn-more-link {
        opacity: 1;
      }
    }
  }
</style>

---
import type { CollectionEntry } from 'astro:content';

import CardContentPortfolio from './CardContentPortfolio.astro';
import CardContentWriting from './CardContentWriting.astro';

interface Props {
  basePath: string; // TODO: update naming to reflect how it's used
  collection: CollectionEntry<'portfolio' | 'writing'>[];
  previewLocation: 'home' | 'page-preview';
}

const { collection, basePath, previewLocation } = Astro.props;

function getGridValues(item: CollectionEntry<'portfolio' | 'writing'>): {
  columns: number;
  rows: number;
} {
  const gridProperties = { home: item.data.home.grid, 'page-preview': item.data.preview.grid };
  return gridProperties[previewLocation];
}

function shouldDisplay(item: CollectionEntry<'portfolio' | 'writing'>): boolean {
  const displayProperties = {
    home: item.data.home.enable,
    'page-preview': item.data.preview.enable,
  };
  return displayProperties[previewLocation];
}

function highestRowCount(collection: CollectionEntry<'portfolio' | 'writing'>[]): number {
  return collection.reduce((previous, current) => {
    const currentRowCount = current.data.preview.grid.rows;
    return currentRowCount > previous ? currentRowCount : previous;
  }, 0);
}

function buildClasses(item: CollectionEntry<'portfolio' | 'writing'>): string[] {
  const gridValues = getGridValues(item);
  return [`cols-${gridValues.columns}`, `rows-${gridValues.rows}`];
}

function buildLinkPath(item: CollectionEntry<'portfolio' | 'writing'>): string {
  return `${basePath}/${item.slug}`;
}
---

<div class:list={['content-preview-masonry', `grid-rows-${highestRowCount(collection)}`]}>
  {
    collection
      .filter((item) => item.data.title.toLowerCase() !== 'template')
      .filter((item) => shouldDisplay(item))
      .map((item) => {
        return 'screenshot' in item.data ? (
          <CardContentPortfolio
            linkPath={buildLinkPath(item)}
            content={item as CollectionEntry<'portfolio'>}
            classes={buildClasses(item)}
          />
        ) : (
          <CardContentWriting
            linkPath={buildLinkPath(item)}
            content={item as CollectionEntry<'writing'>}
            classes={buildClasses(item)}
          />
        );
      })
  }
</div>

<style lang='scss' is:global>
  .icon {
    position: relative;
    height: 30%;
  }

  .content-preview-masonry {
    --grid-layout-gap: 10px;
    --grid-column-count: 4;
    --grid-item-min-width: 200px;

    /**
   * Calculated values.
   */
    --gap-count: calc(var(--grid-column-count) - 1);
    --total-gap-width: calc(var(--gap-count) * var(--grid-layout-gap));
    --grid-item-max-width: calc((100% - var(--total-gap-width)) / var(--grid-column-count));

    display: grid;
    grid-template-columns: repeat(
      auto-fit,
      minmax(max(var(--grid-item-min-width), var(--grid-item-max-width)), 1fr)
    );
    grid-gap: var(--grid-layout-gap);
  }

  @for $gridSpanCount from 1 through 12 {
    .rows-#{$gridSpanCount} {
      grid-row: span $gridSpanCount;
    }

    .cols-#{$gridSpanCount} {
      grid-column: span $gridSpanCount;
    }
  }
</style>
